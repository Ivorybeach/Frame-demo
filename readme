Spring IoC: Inversion of Control
	控制反转是一种设计思想，即把对象交给容器去管理，当需要使用对象时从容器中取出；对象不是由自己去建立(实例化)的，而是交给容器去完成；
	举例在开发过程中：有财务和订单两个模块，两个模块分别将各自的内容发布到IoC容器中，假如财务想要获取订单的内容时，不需要考虑订单是如何实
	现的，只需要对订单做出描述，容器就会根据描述自动创建订单对象;	
DI：Dependency Injection，依赖注入，和IoC思想相辅相成，是将依赖注入到SpringIoC容器中，容器在创建对象时需要利用注入的依赖；

ApplicationContext
	一个底层接口，有多个实现类，常见的有:
	ClassPathXmlApplicationContext:用于xml方式初始化spring容器；
	AnnotationConfigApplicationContext:注解的方式初始化spring容器；
	web项目使用webApplicationContext初始化容器；
	
BeanFactory
	底层接口，最重要的方法是getBean()方法，可以通过bean_name或类型去获取bean；isSingleton()判断是否单例模式，如果返回true的话，则在
	此容器中同一个bean只能有唯一一个实例；
	
Bean的生命周期：
	Bean的生命周期包括其从定义到创建到销毁的过程，在整个过程中其生命周期是通过许多方法控制的，通过复写这些方法，能够在Bean的生命周期中加
	入自己的逻辑
	Bean的定义：注意仅仅是Bean的定义，并未创建Bean的实例
	1.Resource定位，SpringIoC扫描配置文件(xml或java配置)；2.BeanDefination，将读取Resource的结果保存在BeanDefination
	中；3.将BeanDefination发布到SpringIoC容器
	
依赖注入的方法：
	1.Constructor注入
	2.setter注入，默认的注入方式，容器创建Bean实例默认使用setter注入
	3.接口注入（JNDI注入dataSource）

Bean的装配：
	1.xml装配，第三方类主要使用的装配方式，就是传统的ssm项目使用的xml配置文件
	2.注解装配Bean：
		@Component，被注解的类会被自动扫描成Bean，只能注解类
		@ComponentScan(basePackages=({"",""})，指定扫描@Component的位置，basePackages是数组；
		@Bean，可以注解在方法上，方法返回对象被注册成Bean；
		@Configuration，注解在包含有@Bean注解的配置类上，标志此类为配置类；
			有种说法：@Configuration理解成xml中的<beans>标签，@Bean为<bean>标签；
	3.自动装配：
		@Autowired；
		解决@Autowired的歧义问题：比如引入的是接口RoleService roleService，如果RoleService有多个实现类的话，@Autowired会产生
		歧义，解决方法是使用@Qualifier注解：
		@Qualifier，标注要引入的实现类，栗子：
			@Autowired
			@Qualifier("roleService3")
		原理是，@Autowired注解中，springIoC默认采用的是按Type的方法进行注入，使用@Qualifier就是告诉容器用getName()的方法去注入；
		
其他注解：
	@ImportResource("classpath:sqlMapConfig.xml")	引入xml配置文件；
	@Import({*.class},{*.class})	引入java配置；
	@Profile	定义数据库开发环境，比如环境可以分为dev和test；也可以用xml配置；
	@PropertySource(value=({classpath:db.properties},{*.properties}))	加载.properties配置文件；
		对应xml:<context:property-placeholder location="classpath：db.properties">	
	@Conditional	条件化装配Bean，这个就略了吧。。。

Bean的作用域：
	1.singleton单例：默认配置，在整个applicationContext中，只生成唯一一个bean实例；
	2.prototype原型：每次从SpringIoC容器中获取Bean时都会重新创建实例；
	3.session：web应用中，在一个session范围内只会创建一个实例；
	4.request：web应用中，在一个request域中（一次request请求）只创建一个实例；
	
		
