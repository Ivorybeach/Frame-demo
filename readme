sqlSessionFactoryBuilder
	构建sqlSessionFactory，分步构建的Builder模式，根据Configuration来生成sqlSessionFactory；创建sqlSessionFactory后即可销毁；
	sqlSessionFactoryBuilder.build()底层调用是defaultSqlSessionFactory构造方法，通过传入Configuration对象来构建sqlSessionF;

Configuration:
	XMLConfigBuilder解析配置的xml文件（包括mapper.xml），将解析的内容存放入Configuration对象中，Configuration中包括mapperRegistry,
	TypeHandlerRegistry等组件以及、与配置文件中配置项所对应的java属性；
	可以通过configuration获取mapperRegistry等组件，进而可以获取与mapper有关的信息；
	用于保存mapper.xml信息的组件：
		1.MappedStatement：
			保存mapper的所有信息，包括类型select|update..、parameterType、resultType、sql_id等等
		2.sqlSource:
			属于MappedStatement的一个属性，但sqlSource只是一个接口，其下有实现类，其实现类只有一个方法getBoundSql()，用于获取boundSql
		3.BoundSql:
			通过sqlSource.getBoundSql()方法解析sql之后得到的sql和sql参数
	
BoundSql的三个属性：
	1.parameterObject：代表参数本身，用于储存参数；
		值得注意的是：传递多个参数时，如果无@Param注解，则parameterObject默认存储参数的形式为map:{1,value1},{2,value2}或
		{param1,value1},{param2,value2}，获取时#{1}或#{param1}；加入@Param("key1")后，即可通过#{key1}获取
	2.parameterMappings：保存参数的描述信息如jdbcType,javaType,typeHandler等等
	3.sql：SqlSource解析后的sql
	
sqlSessionFactory
	sqlSession工厂，工厂模式、单例模式，用SqlSessionFactory.builder()来构造，默认实现类defaultSqlSessionFactory；
	相当于数据连接池，所以只能有一个实例，生命周期存在于整个web应用；
	在defaultSqlSessionFactory中有关于query等的方法，这些方法其实是交给Executor类去实现的；
	
sqlSession
	相当于jdbc中一个Connnection对象，可以直接发送sql;也可以获取mapper接口，通过mapper发送sql；提供事务管理(commit提交、rollback回滚)；
	存在于一个业务请求中，此业务结束后，关闭sqlSession，释放数据库资源；
	值得注意的是，这只是一个门面接口，真正的业务逻辑实现在Executor类中

Executor
	query,update等的真正实现类，defaultSqlSessionFactory只是调用Executor类的方法而已；
	可以调度StatementHandler,ParameterHandler,ResultSetHandler
	1.StatementHandler---执行数据库的Statement(preparedStatement)操作
	2.ParameterHandler---处理sql参数
	3.ResultSetHandler---进行数据集ResultSet的处理,将resultSet转换为list

SQLMapper
	映射器，执行SQL，将执行结果与pojo映射；映射器只是接口，底层用动态代理进行实现；生命周期与sqlMapper保持一致，只在一个数据库连接中；
	自动映射：sql中列名或别名与pojo中的属性一致；驼峰映射：
	resultMap:resultMap的主要作用在于提供级联(assoation,collection)支持和typeHandler支持，在级联查询中只能使用resultMap映射；
	sql中获取参数的方式：#{},${}或contact()
	动态代理调用关系sqlSession.getMapper()->defaultSqlSession->configuration->mapperRegistry->MapperProxyFactory
	即动态代理的实现在mapperRegistry类中引用的MapperProxyFactory类下的newProxyInstance()方法
	
TypeAlias
	别名配置，使用TypeAliasRegistry注册别名，mybatis本身已经自动提供了别名，如在mapper中定义parameterType=map，map即是Map.class
	的别名
	需要指出的是，mybatis的许多配件的注册方法都与TypeAlias一致，比如有typeHandlerRegistry
	
TypeHandler
	类型转换器，负责jdbcType和javaType的转换，mybatis提供了注册类TypeHandlerRegistry，与TypeAlias相似；mybatis本身提供的转换器有
	StringTypeHandler(char|varchar,string)
	
缓存
	一级缓存：基于sqlSession的缓存，在一个sqlSession范围内，数据可以共享；默认开启；
	二级缓存：基于sqlSessionFactory的缓存，针对namespace，同一个namespace下的sqlSession之间数据共享；开启二级缓存在mapper.xml中加
	入</cache>,insert,update,delete操作会清空所在namespace下的全部缓存

延迟加载：
	开启：在<setting>中配置
	
加一个mapperScanner--------------------------------------------------------
	------------------------------------------------mybatis分页插件-------------------------------------------------
	
	
	
	
	
	